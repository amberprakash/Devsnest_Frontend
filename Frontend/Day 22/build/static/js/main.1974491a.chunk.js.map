{"version":3,"sources":["components/Templates.jsx","components/Meme.jsx","App.js","index.js"],"names":["Templates","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","el","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","fetch","then","res","json","data","App","setTemplates","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAiBeA,EAjBG,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,UAAUC,EAAa,EAAbA,QAC1B,OACI,qBAAKC,UAAU,YAAf,SACKF,EAAUG,KAAI,SAACC,GAAD,OACX,qBAAuBF,UAAU,WAAWG,QAAS,WACjDJ,EAAQG,IADZ,SAGI,qBACIE,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,MACxBN,UAAU,WALRE,EAASK,U,cCgDpBC,EAlDF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMV,EAAc,EAAdA,QAClB,EAAqBW,mBAAS,CAC1BC,YAAYF,EAAKF,GACjBK,SAAS,oBACTC,SAAS,WACTC,MAAO,KAJX,mBAAOC,EAAP,KAAYC,EAAZ,KAiBA,OACI,sBAAKhB,UAAU,OAAf,UACI,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,KACxB,8BAEQ,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAIC,GAAL,OAC3B,uBAAOC,KAAK,OAAOC,YAAW,uBAAkBF,EAAQ,GAExDG,SAAU,SAACC,GACP,IAAMC,EAAWZ,EAAKD,MACtBa,EAASL,GAAQ,CAACM,KAAMF,EAAEG,OAAOC,OACjCd,EAAQ,2BAAID,GAAL,IAAWD,MAAMa,OAJvBL,QAWjB,gCACI,wBAAQnB,QA7BC,WACjB,IAAIG,EAAI,qDAAD,OAAsDS,EAAKJ,YAA3D,qBAAmFI,EAAKH,SAAxF,qBAA6GG,EAAKF,UACzHE,EAAKD,MAAMb,KAAI,SAAC8B,EAAIT,GACdhB,GAAK,UAAF,OAAagB,EAAb,mBAA6BS,EAAIH,SAE1CI,MAAM1B,GAAK2B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAC1BF,MAAK,SAAAG,GACHrC,EAAQ,2BAAIU,GAAL,IAAUH,IAAI8B,EAAKA,KAAK9B,WAsB1B,2BAGA,wBAAQH,QAAS,WACbJ,EAAQ,OADZ,oC,MCfDsC,MAtBf,WACE,MAAkC3B,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBwC,EAAlB,KACA,EAAuB5B,mBAAS,MAAhC,mBAAOD,EAAP,KAAaV,EAAb,KAQA,OAPAwC,qBAAU,WACRP,MAAM,qCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJE,EAAaF,EAAKA,KAAKI,YAE1B,IAED,sBAAKxC,UAAU,MAAf,UACE,gDACQ,OAAPS,EAAgB,cAAC,EAAD,CAAUX,UAAWA,EAAWC,QAASA,IACtD,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QCbrC0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1974491a.chunk.js","sourcesContent":["const Templates = ({templates,setMeme}) => {\r\n    return (\r\n        <div className=\"templates\">\r\n            {templates.map((template) => (\r\n                <div key={template.id} className=\"template\" onClick={()=>{\r\n                    setMeme(template);\r\n                }}>\r\n                    <div\r\n                        style={{ backgroundImage: `url(${template.url})` }}\r\n                        className=\"image\"\r\n                    ></div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Templates;","import { useState } from \"react\";\r\n\r\nconst Meme = ({ meme, setMeme }) => {\r\n    const [form,setForm]=useState({\r\n        template_id:meme.id,\r\n        username:\"AmberprakashVerma\",\r\n        password:\"123amber\",\r\n        boxes: [],\r\n\r\n    });\r\n    const generateMeme = () =>{\r\n        let url=`https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box,index) =>{\r\n              url+= `&boxes[${index}][text]=${box.text}`;\r\n        });\r\n        fetch(url).then(res => res.json())\r\n        .then(data => {\r\n           setMeme({...meme,url:data.data.url})\r\n        })\r\n    };\r\n    return (\r\n        <div className=\"meme\">\r\n            <img src={meme.url} alt=\"\" />\r\n            <div>\r\n                {\r\n                    [...Array(meme.box_count)].map((el, index) => (\r\n                        <input type=\"text\" placeholder={`Meme Caption ${index + 1}`} \r\n                        key={index}\r\n                        onChange={(e)=>{\r\n                            const newBoxes = form.boxes;\r\n                            newBoxes[index]= {text: e.target.value};\r\n                            setForm({...form, boxes:newBoxes});\r\n                        }} \r\n                        \r\n                        />\r\n                    )\r\n                    )}\r\n            </div>\r\n            <div>\r\n                <button onClick={generateMeme}>\r\n                    Generate Meme\r\n                </button>\r\n                <button onClick={() => {\r\n                    setMeme(null);\r\n                }}>\r\n                    Choose Template\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Meme;","import { useState, useEffect } from 'react';\nimport Template from \"./components/Templates\";\nimport Meme from \"./components/Meme\";\nimport './App.css';\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [meme, setMeme]= useState(null);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(res => res.json())\n      .then(data => {\n        setTemplates(data.data.memes);\n      });\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>Meme Generator</h1>\n      {meme===null ?  (<Template templates={templates} setMeme={setMeme} />)\n       : (<Meme meme={meme} setMeme={setMeme}/>)\n       }\n     \n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}